/* _text.scss */
// This files is for font definitions and text flow control.
// Use the text() mixin in your component/functionality rules

// right now font size multiplier value is set to 1 need to be modify according to UI style guidelines 
$app-platform:'android';
$app-font-size-multiplier: 1;


@if $app-platform == 'ios' {
  // Correct for:  Sencha-applied body.x-ios.x-phone: 114%
  //$app-font-size-multiplier: (1/1.14) / 2;
  $app-font-size-multiplier: 1;
}
@else if $app-platform == 'android' {
  //$app-font-size-multiplier: (1 / 2)*1.35;
   $app-font-size-multiplier: 1;
}


// === PUBLIC ===

// This is only function you should need to call from outside this file!
@mixin text($label, $multi-line) {
  @include font-label($label);
  @include text-lines($multi-line);
}

// Use with content font size only!
$standard-margin-value: 0.6;
$standard-margin : $standard-margin-value * 1rem;
$standard-padding : 1 * $standard-margin;


// ==== DATA ===

// label, font-weight, font-size, color, text-shadow
  
$pixel-em-convert : 8;
$adjustment-factor : 1;

/*
 * Font usage instructions
 * 
 * Usage in View:
 * cls: 'text-single-label-bold-gray-32'
 * cls: 'text-multi-label-bold-gray-32'
 * 
 * Usage in css:
 * @include text('label-bold-gray-32','single');
 * @include text('label-bold-gray-32','multi');
 */


$font-data: (

	//app related text fonts

);
// Generate the CSS for a named font
@mixin font-label($font-label) {
  $found: false;
  @each $font in $font-data {
    @if length($font) != 4 and length($font) != 5 and length($font) != 6{
      // We expect the table rows to have 4 or 5 items
      @warn "Font data table corrupted";
    }
    $label: nth($font, 1);  // in SASS, list indices begin at 1
    @if $font-label == $label {
      $found: true;
      font-family: nth($font, 2),SSNetRegular;
      font-size: nth($font, 3)  !important;
      color: nth($font, 4)  !important;
        
      @if length($font) > 4 {
        text-shadow: nth($font, 5)  !important;
      }
    }
  }
  @if not $found {
    @warn "Invalid font label specified: #{$font-label}";
  }
}

// Generate the CSS for a named line-mode
@mixin text-lines($lines) {
  @if $lines == 'multi' {
    // The container will expand vertically as needed, by going multi-line.
    // Strings will never overflow the container horizontally.
    // Words that exceed a single line will break mid-word.
    // Suggestions of &shy; and <wbr> will be taken if needed.
    word-wrap: break-word;  // Split single words that are simply too big
    //-webkit-hyphens: auto;  // Attempt enhanced hyphenation if brwowser supports it
    white-space: pre-wrap;  // Consider tabs and spaces as important/intentional
    overflow: visible;      // Default, but important
    word-break: break-word;     // Default, but important
  	text-overflow: ellipsis;
  }
  @else if $lines == 'single' {
    // Single-line string.
    // String will not overflow the container horizontally.
    // String will ellipsize if needed.
    overflow: hidden;       // Dont show out-of-bounds content
    text-overflow: ellipsis;// Enable ellipsis on overflow  
    white-space: pre;      // Consider tabs and spaces as important/intentional
    word-wrap: normal;     // Default, but important
  }
  @else {
    @warn "Invalid text lines specified: #{$lines}";
  }
}


// Generate concrete CSS rules for all (line-mode,font-label) pairs
@each $font in $font-data {
  $label: nth($font, 1);
  @each $line-mode in ('multi', 'single') {
    .text-#{$line-mode}-#{$label} {
      @include text($label, $line-mode);
    }
  }
}

// Private function for assisting _distance.scss
@function text-height($font-label) {
  @each $font in $font-data {
    $label: nth($font, 1);  // in SASS, list indices begin at 1
    @if $font-label == $label {
      @return nth($font, 3);
    }
  }
  @warn "Invalid font label specified: #{$font-label}";
}
